/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ships.view;

import ships.controller.Game;
import ships.controller.PlayerVsComputerGame;
import ships.model.Ship;

import javax.swing.*;
import java.awt.event.ItemEvent;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author r4pt0r
 */
public class BattleshipsGame extends javax.swing.JFrame {

    private Game game;

    /**
     * Creates new form GUI
     */
    public BattleshipsGame() {
        initComponents();

        //create game controller
        game = new PlayerVsComputerGame();

        //set sizes of components
        game.getPlayerMapView().setBounds(0, 0, playerPanel.getWidth(), playerPanel.getHeight());
        game.getOpponentMapView().setBounds(0, 0, opponentPanel.getWidth(), opponentPanel.getHeight());

        //add components to panels
        opponentPanel.add(game.getOpponentMapView());
        playerPanel.add(game.getPlayerMapView());

        //listen to click events to update non-gamefield interface
        game.getPlayerMapView().addFieldSelectObserver(new PlayerObserver());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playerPanel = new java.awt.Panel();
        opponentPanel = new java.awt.Panel();
        opponentScore = new javax.swing.JLabel();
        playerScore = new javax.swing.JLabel();
        panel1 = new java.awt.Panel();
        jLabel1 = new javax.swing.JLabel();
        fourPicker = new javax.swing.JToggleButton();
        threePicker = new javax.swing.JToggleButton();
        twoPicker = new javax.swing.JToggleButton();
        onePicker = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Battleships");

        javax.swing.GroupLayout playerPanelLayout = new javax.swing.GroupLayout(playerPanel);
        playerPanel.setLayout(playerPanelLayout);
        playerPanelLayout.setHorizontalGroup(
                playerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 280, Short.MAX_VALUE)
        );
        playerPanelLayout.setVerticalGroup(
                playerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 280, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout opponentPanelLayout = new javax.swing.GroupLayout(opponentPanel);
        opponentPanel.setLayout(opponentPanelLayout);
        opponentPanelLayout.setHorizontalGroup(
                opponentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 280, Short.MAX_VALUE)
        );
        opponentPanelLayout.setVerticalGroup(
                opponentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 280, Short.MAX_VALUE)
        );

        opponentScore.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        opponentScore.setText("0");

        playerScore.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        playerScore.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        playerScore.setText("0");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(":");

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
                panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
                panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1))
        );

        fourPicker.setIcon(new javax.swing.ImageIcon(getClass().getResource("/four.png"))); // NOI18N
        fourPicker.setText("1");
        fourPicker.setToolTipText("1 more available");
        fourPicker.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        fourPicker.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fourPickerItemStateChanged(evt);
            }
        });

        threePicker.setIcon(new javax.swing.ImageIcon(getClass().getResource("/three.png"))); // NOI18N
        threePicker.setText("2");
        threePicker.setToolTipText("2 more available");
        threePicker.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        threePicker.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                threePickerItemStateChanged(evt);
            }
        });

        twoPicker.setIcon(new javax.swing.ImageIcon(getClass().getResource("/two.png"))); // NOI18N
        twoPicker.setText("3");
        twoPicker.setToolTipText("3 more available");
        twoPicker.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        twoPicker.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                twoPickerItemStateChanged(evt);
            }
        });

        onePicker.setIcon(new javax.swing.ImageIcon(getClass().getResource("/one.png"))); // NOI18N
        onePicker.setText("4");
        onePicker.setToolTipText("4 more available");
        onePicker.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        onePicker.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                onePickerItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(playerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(playerScore, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(opponentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(fourPicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(threePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(twoPicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(onePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(opponentScore, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(fourPicker)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(threePicker)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(twoPicker)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(onePicker))
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                .addComponent(opponentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(playerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(0, 0, Short.MAX_VALUE)
                                                                .addComponent(opponentScore))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(playerScore)
                                                                .addGap(0, 0, Short.MAX_VALUE))))
                                        .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fourPickerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fourPickerItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            threePicker.setSelected(false);
            twoPicker.setSelected(false);
            onePicker.setSelected(false);
            game.startPlacement(Ship.Size.FOUR);
        }
        else {
            game.stopPlacement();
        }
    }//GEN-LAST:event_fourPickerItemStateChanged

    private void threePickerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_threePickerItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            fourPicker.setSelected(false);
            twoPicker.setSelected(false);
            onePicker.setSelected(false);
            game.startPlacement(Ship.Size.THREE);
        }
        else {
            game.stopPlacement();
        }
    }//GEN-LAST:event_threePickerItemStateChanged

    private void twoPickerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_twoPickerItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            fourPicker.setSelected(false);
            threePicker.setSelected(false);
            onePicker.setSelected(false);
            game.startPlacement(Ship.Size.TWO);
        }
        else {
            game.stopPlacement();
        }
    }//GEN-LAST:event_twoPickerItemStateChanged

    private void onePickerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_onePickerItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            fourPicker.setSelected(false);
            threePicker.setSelected(false);
            twoPicker.setSelected(false);
            game.startPlacement(Ship.Size.ONE);
        }
        else {
            game.stopPlacement();
        }
    }//GEN-LAST:event_onePickerItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BattleshipsGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BattleshipsGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BattleshipsGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BattleshipsGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BattleshipsGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton fourPicker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToggleButton onePicker;
    private java.awt.Panel opponentPanel;
    private javax.swing.JLabel opponentScore;
    private java.awt.Panel panel1;
    private java.awt.Panel playerPanel;
    private javax.swing.JLabel playerScore;
    private javax.swing.JToggleButton threePicker;
    private javax.swing.JToggleButton twoPicker;
    // End of variables declaration//GEN-END:variables

    class PlayerObserver implements MapClickObserver {

        Integer avaiableShipClasses;

        @Override
        public void fieldClickedEvent(FieldSelectEvent fce, MapView bm) {
            if (fce.getButton() != FieldSelectEventImpl.BUTTON1) {
                return;
            }
            avaiableShipClasses = 4;
            updatePicker(onePicker, Ship.Size.ONE);
            updatePicker(twoPicker, Ship.Size.TWO);
            updatePicker(threePicker, Ship.Size.THREE);
            updatePicker(fourPicker, Ship.Size.FOUR);
            if (avaiableShipClasses == 0) {
                fourPicker.setVisible(false);
                threePicker.setVisible(false);
                twoPicker.setVisible(false);
                onePicker.setVisible(false);
                Logger.getLogger(PlayerMapView.class.getName()).log(Level.WARNING, "TODO: hide all pickers");
            }
            if (game.getPlayerMap().isDeploymentFinished()) {
                playerScore.setText(Integer.toString(game.getPlayerMap().getScore()));
            }
        }

        /**
         * Updates picker label and tooltip, disable if necessary and deselects
         * @param picker
         * @param size
         */
        private void updatePicker(JToggleButton picker, Ship.Size size) {
            Integer availableShips = game.getPlayerMap().getAvailableShipCount(size);
            picker.setText(availableShips.toString());
            picker.setSelected(false);
            if (availableShips == 0) {
                picker.setEnabled(false);
                avaiableShipClasses--;
                picker.setToolTipText("no more available");
                return;
            }
            picker.setToolTipText(""+availableShips+" more available");
        }


    }


}
